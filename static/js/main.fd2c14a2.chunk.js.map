{"version":3,"sources":["Components/Tracker.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Tracker","items","isLoading","query","isp","regionName","country","city","timezone","status","Search","getQuery","useState","text","setText","type","className","placeholder","value","onChange","e","q","target","autoFocus","App","setItems","setIsLoading","setQuery","useEffect","a","axios","result","console","log","data","fetchItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSAiCeA,G,MA9BC,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,MACd,OADoC,EAAfC,UACD,0CAChB,6BACE,4BACE,4BACE,2CADF,IAC4BD,EAAME,OAElC,4BACE,yCADF,IAC0BF,EAAMG,KAEhC,4BACE,4CADF,IAC6BH,EAAMI,YAEnC,4BACE,6CADF,IAC8BJ,EAAMK,SAEpC,4BACE,0CADF,IAC2BL,EAAMM,MAEjC,4BACE,8CADF,IAC+BN,EAAMO,UAErC,4BACE,4CADF,IAC6BP,EAAMQ,YCAhCC,EAxBA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAEHC,mBAAS,IAFN,mBAEpBC,EAFoB,KAEdC,EAFc,KAS3B,OACI,iCACI,8BACI,2BAAOC,KAAK,OACZC,UAAU,SACVC,YAAY,kBACZC,MAAOL,EACPM,SAAU,SAACC,GAAD,OAZJC,EAYoBD,EAAEE,OAAOJ,MAX3CJ,EAAQO,QACRV,EAASU,GAFI,IAACA,GAaNE,WAAS,OCWVC,MAxBf,WAAgB,IAAD,EAEaZ,mBAAS,IAFtB,mBAENX,EAFM,KAECwB,EAFD,OAGqBb,oBAAS,GAH9B,mBAGNV,EAHM,KAGKwB,EAHL,OAIad,mBAAS,IAJtB,mBAINT,EAJM,KAICwB,EAJD,KAgBb,OAVAC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACIC,IAAM,2BAAD,OAA4B3B,IADrC,OACX4B,EADW,OAEjBC,QAAQC,IAAI,cAAcF,EAAOG,MACjCT,EAASM,EAAOG,MAChBR,GAAc,GAJG,2CAAH,qDAMhBS,KACA,CAAChC,IAGD,yBAAKa,UAAU,OACb,kBAAC,EAAD,CAAQL,SAAU,SAACU,GAAD,OAAOM,EAASN,MAClC,kBAAC,EAAD,CAASpB,MAAOA,EAAOC,UAAWA,MCbpBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.fd2c14a2.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../App.css'\r\n\r\nconst Tracker = ({items, isLoading}) => {\r\n    return isLoading ? (<h2>Loading...</h2>) : (\r\n        <div>\r\n          <ul>\r\n            <li>\r\n              <strong>Query :</strong> {items.query}\r\n            </li>\r\n            <li>\r\n              <strong>ISP :</strong> {items.isp}\r\n            </li>\r\n            <li>\r\n              <strong>Region :</strong> {items.regionName}\r\n            </li>\r\n            <li>\r\n              <strong>Country :</strong> {items.country}\r\n            </li>\r\n            <li>\r\n              <strong>City :</strong> {items.city}\r\n            </li>\r\n            <li>\r\n              <strong>Timezone :</strong> {items.timezone}\r\n            </li>\r\n            <li>\r\n              <strong>Status :</strong> {items.status}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tracker\r\n","import React, {useState} from 'react'\r\n\r\nconst Search = ({getQuery}) => {\r\n\r\n    const [text, setText] = useState('')\r\n\r\n    const onChange = (q) => {\r\n        setText(q)\r\n        getQuery(q)\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <form>\r\n                <input type=\"text\" \r\n                className=\"search\"\r\n                placeholder=\"Enter Target IP\"\r\n                value={text}\r\n                onChange={(e) => onChange(e.target.value)}\r\n                autoFocus\r\n                />\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Tracker from './Components/Tracker'\nimport Search from './Components/Search'\n\nfunction App() {\n\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState('')\n  \n  useEffect(() => {\n    const fetchItems = async () => {\n      const result = await axios(`https://ip-api.com/json/${query}`)\n      console.log('result is: ',result.data);\n      setItems(result.data);\n      setIsLoading (false);\n    }\n    fetchItems();\n  },[query])\n\n  return (\n    <div className=\"App\">\n      <Search getQuery={(q) => setQuery(q)}></Search>\n      <Tracker items={items} isLoading={isLoading}></Tracker>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}